// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211027164516_hit_cluster_group_to_int")]
    partial class hit_cluster_group_to_int
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Domain.AppOrg", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AppOrgs");
                });

            modelBuilder.Entity("Domain.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Domain.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Archived")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("Lock")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("OrgId")
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("OrgId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Domain.ChangeLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateChanged")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EntityName")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("NewValue")
                        .HasColumnType("text");

                    b.Property<string>("OldValue")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryKeyValue")
                        .HasColumnType("text");

                    b.Property<string>("PropertyName")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChangeLogs");
                });

            modelBuilder.Entity("Domain.Compound", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("MolArea")
                        .HasColumnType("text");

                    b.Property<string>("MolWeight")
                        .HasColumnType("text");

                    b.Property<string>("SaccId")
                        .HasColumnType("text");

                    b.Property<string>("Smile")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Compounds");
                });

            modelBuilder.Entity("Domain.Discussion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Mentions")
                        .HasColumnType("text");

                    b.Property<string>("PostedBy")
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<string>("Section")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Topic")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Discussions");
                });

            modelBuilder.Entity("Domain.Gene", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessionNumber")
                        .HasColumnType("text");

                    b.Property<string>("Function")
                        .HasColumnType("text");

                    b.Property<string>("FunctionalCategory")
                        .HasColumnType("text");

                    b.Property<string>("GeneName")
                        .HasColumnType("text");

                    b.Property<string>("Product")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genes");
                });

            modelBuilder.Entity("Domain.GeneEssentiality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Classification")
                        .HasColumnType("text");

                    b.Property<string>("EssentialityCondition")
                        .HasColumnType("text");

                    b.Property<string>("GeneAccessionNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("GeneId")
                        .HasColumnType("uuid");

                    b.Property<string>("Method")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<string>("Strain")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GeneId");

                    b.ToTable("GeneEssentiality");
                });

            modelBuilder.Entity("Domain.GeneNonPublicData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CRISPRiStrain")
                        .HasColumnType("text");

                    b.Property<string>("CompoundSmiles")
                        .HasColumnType("text");

                    b.Property<string>("GeneAccessionNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("GeneId")
                        .HasColumnType("uuid");

                    b.Property<string>("Isolate")
                        .HasColumnType("text");

                    b.Property<string>("KnockdownStrain")
                        .HasColumnType("text");

                    b.Property<string>("Lab")
                        .HasColumnType("text");

                    b.Property<string>("Ligand")
                        .HasColumnType("text");

                    b.Property<string>("Mutation")
                        .HasColumnType("text");

                    b.Property<string>("Organization")
                        .HasColumnType("text");

                    b.Property<string>("ParentStrain")
                        .HasColumnType("text");

                    b.Property<string>("Phenotype")
                        .HasColumnType("text");

                    b.Property<string>("ProteinActivityAssay")
                        .HasColumnType("text");

                    b.Property<string>("ProteinProduction")
                        .HasColumnType("text");

                    b.Property<string>("Resolution")
                        .HasColumnType("text");

                    b.Property<string>("ShiftInMIC")
                        .HasColumnType("text");

                    b.Property<string>("UnpublishedCondition")
                        .HasColumnType("text");

                    b.Property<string>("UnpublishedMethod")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GeneId")
                        .IsUnique();

                    b.ToTable("GeneNonPublicData");
                });

            modelBuilder.Entity("Domain.GenePromotionRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("GeneAccessionNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("GeneId")
                        .HasColumnType("uuid");

                    b.Property<string>("GenePromotionRequestStatus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GeneId");

                    b.ToTable("GenePromotionRequests");
                });

            modelBuilder.Entity("Domain.GenePromotionRequestValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .HasColumnType("text");

                    b.Property<string>("AnswerdBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("GenePromotionRequestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GenePromotionRequestId");

                    b.HasIndex("QuestionId");

                    b.ToTable("GenePromotionRequestValues");
                });

            modelBuilder.Entity("Domain.GenePublicData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<string>("Cryo")
                        .HasColumnType("text");

                    b.Property<string>("End")
                        .HasColumnType("text");

                    b.Property<string>("GeneAccessionNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("GeneId")
                        .HasColumnType("uuid");

                    b.Property<string>("GeneLength")
                        .HasColumnType("text");

                    b.Property<string>("GeneSequence")
                        .HasColumnType("text");

                    b.Property<string>("IsoelectricPoint")
                        .HasColumnType("text");

                    b.Property<string>("Ligand")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("M_Leprae")
                        .HasColumnType("text");

                    b.Property<string>("M_Marinum")
                        .HasColumnType("text");

                    b.Property<string>("M_Smegmatis")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<string>("MolecularMass")
                        .HasColumnType("text");

                    b.Property<string>("Mutant")
                        .HasColumnType("text");

                    b.Property<string>("Orientation")
                        .HasColumnType("text");

                    b.Property<string>("PFAM")
                        .HasColumnType("text");

                    b.Property<string>("ProteinLength")
                        .HasColumnType("text");

                    b.Property<string>("ProteinSequence")
                        .HasColumnType("text");

                    b.Property<string>("Proteomics")
                        .HasColumnType("text");

                    b.Property<string>("Start")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("XRay")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GeneId")
                        .IsUnique();

                    b.ToTable("GenePublicData");
                });

            modelBuilder.Entity("Domain.GeneVulnerability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Confounded")
                        .HasColumnType("text");

                    b.Property<string>("GeneAccessionNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("GeneId")
                        .HasColumnType("uuid");

                    b.Property<string>("IVi")
                        .HasColumnType("text");

                    b.Property<string>("Operon")
                        .HasColumnType("text");

                    b.Property<string>("Rank")
                        .HasColumnType("text");

                    b.Property<string>("Shell2015Operon")
                        .HasColumnType("text");

                    b.Property<string>("UVi")
                        .HasColumnType("text");

                    b.Property<string>("ViRatio")
                        .HasColumnType("text");

                    b.Property<string>("VulnerabilityCondition")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GeneId")
                        .IsUnique();

                    b.ToTable("GeneVulnerability");
                });

            modelBuilder.Entity("Domain.Hit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessionNumber")
                        .HasColumnType("text");

                    b.Property<int>("ClusterGroup")
                        .HasColumnType("integer");

                    b.Property<Guid>("CompoundId")
                        .HasColumnType("uuid");

                    b.Property<string>("IC50")
                        .HasColumnType("text");

                    b.Property<string>("Library")
                        .HasColumnType("text");

                    b.Property<string>("MIC")
                        .HasColumnType("text");

                    b.Property<string>("Method")
                        .HasColumnType("text");

                    b.Property<Guid>("ScreenId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompoundId");

                    b.HasIndex("ScreenId");

                    b.ToTable("Hits");
                });

            modelBuilder.Entity("Domain.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Identification")
                        .HasColumnType("text");

                    b.Property<string>("Module")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PossibleAnswers")
                        .HasColumnType("text");

                    b.Property<string>("QuestionBody")
                        .HasColumnType("text");

                    b.Property<string>("SubModule")
                        .HasColumnType("text");

                    b.Property<string>("ToolTip")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Domain.Reply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<Guid>("DiscussionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Mentions")
                        .HasColumnType("text");

                    b.Property<string>("PostedBy")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionId");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("Domain.Screen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessionNumber")
                        .HasColumnType("text");

                    b.Property<string>("GeneName")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uuid");

                    b.Property<string>("Promoter")
                        .HasColumnType("text");

                    b.Property<DateTime>("PromotionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ScreenName")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.HasIndex("TargetId");

                    b.ToTable("Screens");
                });

            modelBuilder.Entity("Domain.ScreenSequence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessionNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Library")
                        .HasColumnType("text");

                    b.Property<string>("Method")
                        .HasColumnType("text");

                    b.Property<string>("Protocol")
                        .HasColumnType("text");

                    b.Property<string>("Scientist")
                        .HasColumnType("text");

                    b.Property<Guid>("ScreenId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UnverifiedHitCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ScreenId");

                    b.ToTable("ScreenSequences");
                });

            modelBuilder.Entity("Domain.Target", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessionNumber")
                        .HasColumnType("text");

                    b.Property<string>("Bucket")
                        .HasColumnType("text");

                    b.Property<Guid>("GeneId")
                        .HasColumnType("uuid");

                    b.Property<string>("GeneName")
                        .HasColumnType("text");

                    b.Property<double>("HTSFeasibility")
                        .HasColumnType("double precision");

                    b.Property<double>("ImpactComplete")
                        .HasColumnType("double precision");

                    b.Property<double>("ImpactScore")
                        .HasColumnType("double precision");

                    b.Property<double>("LikeComplete")
                        .HasColumnType("double precision");

                    b.Property<double>("LikeScore")
                        .HasColumnType("double precision");

                    b.Property<double>("Progressibility")
                        .HasColumnType("double precision");

                    b.Property<double>("SBDFeasibility")
                        .HasColumnType("double precision");

                    b.Property<double>("Safety")
                        .HasColumnType("double precision");

                    b.Property<double>("ScreeningComplete")
                        .HasColumnType("double precision");

                    b.Property<double>("ScreeningScore")
                        .HasColumnType("double precision");

                    b.Property<double>("StructureComplete")
                        .HasColumnType("double precision");

                    b.Property<double>("StructureScore")
                        .HasColumnType("double precision");

                    b.Property<double>("VulnerabilityRank")
                        .HasColumnType("double precision");

                    b.Property<double>("VulnerabilityRatio")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("GeneId")
                        .IsUnique();

                    b.ToTable("Targets");
                });

            modelBuilder.Entity("Domain.TargetScoreCardValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .HasColumnType("text");

                    b.Property<string>("AnswerdBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("QuestionIdentification")
                        .HasColumnType("text");

                    b.Property<string>("QuestionModule")
                        .HasColumnType("text");

                    b.Property<string>("QuestionSubModule")
                        .HasColumnType("text");

                    b.Property<string>("TargetAccessionNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("TargetScorecardId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TargetScorecardId");

                    b.ToTable("TargetScoreCardValues");
                });

            modelBuilder.Entity("Domain.TargetScorecard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("TargetAccessionNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("TargetID")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TargetID")
                        .IsUnique();

                    b.ToTable("TargetScorecards");
                });

            modelBuilder.Entity("Domain.Tasks.BTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCompleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BTask");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.AppUser", b =>
                {
                    b.HasOne("Domain.AppOrg", "Org")
                        .WithMany()
                        .HasForeignKey("OrgId");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("Domain.GeneEssentiality", b =>
                {
                    b.HasOne("Domain.Gene", null)
                        .WithMany("GeneEssentiality")
                        .HasForeignKey("GeneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.GeneNonPublicData", b =>
                {
                    b.HasOne("Domain.Gene", null)
                        .WithOne("GeneNonPublicData")
                        .HasForeignKey("Domain.GeneNonPublicData", "GeneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.GenePromotionRequest", b =>
                {
                    b.HasOne("Domain.Gene", "Gene")
                        .WithMany()
                        .HasForeignKey("GeneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gene");
                });

            modelBuilder.Entity("Domain.GenePromotionRequestValue", b =>
                {
                    b.HasOne("Domain.GenePromotionRequest", null)
                        .WithMany("GenePromotionRequestValues")
                        .HasForeignKey("GenePromotionRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.GenePublicData", b =>
                {
                    b.HasOne("Domain.Gene", null)
                        .WithOne("GenePublicData")
                        .HasForeignKey("Domain.GenePublicData", "GeneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.GeneVulnerability", b =>
                {
                    b.HasOne("Domain.Gene", null)
                        .WithOne("GeneVulnerability")
                        .HasForeignKey("Domain.GeneVulnerability", "GeneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Hit", b =>
                {
                    b.HasOne("Domain.Compound", "Compound")
                        .WithMany()
                        .HasForeignKey("CompoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Screen", null)
                        .WithMany("ValidatedHits")
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compound");
                });

            modelBuilder.Entity("Domain.Reply", b =>
                {
                    b.HasOne("Domain.Discussion", null)
                        .WithMany("Replies")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Screen", b =>
                {
                    b.HasOne("Domain.AppOrg", "Org")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Target", "BaseTarget")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseTarget");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("Domain.ScreenSequence", b =>
                {
                    b.HasOne("Domain.Screen", null)
                        .WithMany("ScreenSequences")
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Target", b =>
                {
                    b.HasOne("Domain.Gene", "BaseGene")
                        .WithMany()
                        .HasForeignKey("GeneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseGene");
                });

            modelBuilder.Entity("Domain.TargetScoreCardValue", b =>
                {
                    b.HasOne("Domain.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.TargetScorecard", null)
                        .WithMany("TargetScoreCardValues")
                        .HasForeignKey("TargetScorecardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.TargetScorecard", b =>
                {
                    b.HasOne("Domain.Target", null)
                        .WithOne("TargetScorecard")
                        .HasForeignKey("Domain.TargetScorecard", "TargetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Domain.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Domain.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Discussion", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Domain.Gene", b =>
                {
                    b.Navigation("GeneEssentiality");

                    b.Navigation("GeneNonPublicData");

                    b.Navigation("GenePublicData");

                    b.Navigation("GeneVulnerability");
                });

            modelBuilder.Entity("Domain.GenePromotionRequest", b =>
                {
                    b.Navigation("GenePromotionRequestValues");
                });

            modelBuilder.Entity("Domain.Screen", b =>
                {
                    b.Navigation("ScreenSequences");

                    b.Navigation("ValidatedHits");
                });

            modelBuilder.Entity("Domain.Target", b =>
                {
                    b.Navigation("TargetScorecard");
                });

            modelBuilder.Entity("Domain.TargetScorecard", b =>
                {
                    b.Navigation("TargetScoreCardValues");
                });
#pragma warning restore 612, 618
        }
    }
}
